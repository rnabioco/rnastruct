shell.executable("/bin/bash")
shell.prefix("source ~/.bash_profile; ")
import glob
import os

''' rules to process struct-Seq data '''

configfile: "config.yaml"
  
DATA = config["DATA"]
SAMPLES = config["SAMPLES"]
GENOME_DIR = config["GENOME_DIR"]
GENOME_FA = config["GENOME_FA"]
TRANSCRIPTS = config["TRANSCRIPTS"]

rule all:
  input:
    expand("{data}/data/star/{samples}_defaults.bam", 
      data = DATA, samples = SAMPLES),
    expand("{data}/data/mismatches/{samples}/{samples}_pileup_table.tsv.gz",
      data = DATA, samples = SAMPLES),
    expand("{data}/data/mismatches/{samples}/{samples}_rRNA_pileup_table.tsv.gz",
      data = DATA, samples = SAMPLES)

rule count_rRNA_mismatches:
    """ count mismatches and indels in rRNA
    generate bedgraphs and summary table
    allow multi mapping
    """
    input:
      bam = "{data}/data/star/{samples}_sorted.bam",
      bai = "{data}/data/star/{samples}_sorted.bam.bai"
    output:
      "{data}/data/mismatches/{samples}/{samples}_rRNA_pileup_table.tsv.gz"
    params:
      job_name = "mmcount",
      out = "{data}/data/mismatches/{samples}/{samples}_rRNA_",
      memory = "select[mem>100] rusage[mem=100] span[hosts=1]",
    log:
      "log/{samples}_rRNA_mismatches.txt"
    message:
      "running mismatch quantifications "
    resources: all_threads=1
    shell:
      """
      module load samtools python3 gcc
      count_mutations.py \
        -b {input.bam} \
        -d 5 \
        -f {GENOME_FA} \
        -p ' -r gi|555853|gb|U13369.1|HSU13369 ' \
        -o {params.out} \
        -v True
      module unload samtools
      """

rule count_mismatches:
    """ count mismatches and indels per position
    generate bedgraphs and summary table
    """
    input:
      bam = "{data}/data/star/{samples}_sorted.bam",
      bai = "{data}/data/star/{samples}_sorted.bam.bai"
    output:
      "{data}/data/mismatches/{samples}/{samples}_pileup_table.tsv.gz"
    params:
      job_name = "mmcount",
      out = "{data}/data/mismatches/{samples}/{samples}_",
      memory = "select[mem>100] rusage[mem=100] span[hosts=1]",
    log:
      "log/{samples}_mismatches.txt"
    message:
      "running mismatch quantifications "
    threads:
      12
    resources: all_threads=12
    shell:
      """
      module load samtools python3 gcc
      count_mutations.py \
        -b {input.bam} \
        -d 5 \
        -f {GENOME_FA} \
        -t {threads} \
        -o {params.out} \
        -p " -q 10 -Q 20 -R" \
        -v True
      module unload samtools
      """

rule sort_idx:
    input:
      bam = "{data}/data/star/{samples}_defaults.bam"
    output:
      bam = "{data}/data/star/{samples}_sorted.bam",
      bai = "{data}/data/star/{samples}_sorted.bam.bai",
    params:
      job_name = "mmcount",
      memory = "select[mem>35] rusage[mem=35] span[hosts=1]",
    log:
      "log/{samples}_mismatches.txt"
    message:
      "running mismatch quantifications "
    threads:
      6
    resources: all_threads=6
    shell:
      """
      module load samtools
      samtools sort -@ {threads} {input.bam} > {output.bam}
      samtools index -@ {threads} {output.bam}
      module unload samtools
      """

rule star_align_def:
    """ map reads to genome/transcriptome using STAR 
    STAR_2.5.1b
    """
    input:
      R1 = "{data}/data/cutadapt/{samples}_trimmed.fastq.gz",
      genome = GENOME_DIR + "/Genome"
    output:
      bam = "{data}/data/star/{samples}_defaults.bam"
    params:
      job_name = "star",
      tmpbam = "{data}/data/star/{samples}_defaults_Aligned.sortedByCoord.out.bam",
      out= "{data}/data/star/{samples}_defaults_",
      memory = "select[mem>35] rusage[mem=35] span[hosts=1]",
    log:
      "log/{samples}_align_defaults.txt"
    message:
      "running star alignments "
    threads:
      12
    resources: all_threads=12
    shell:
      """
      module load star
      STAR \
        --genomeDir {GENOME_DIR}  \
        --runThreadN {threads} \
        --outBAMsortingThreadN {threads} \
        --readFilesIn {input.R1} \
        --readFilesCommand gunzip -c \
        --outFileNamePrefix {params.out} \
        --outMultimapperOrder Random  --outSAMprimaryFlag AllBestScore \
        --outReadsUnmapped Fastx --outFilterType BySJout \
        --outSAMtype BAM SortedByCoordinate --outSAMmode Full \
        --outSAMattributes All  --outSAMattrIHstart 0  --outSAMstrandField intronMotif
      module unload star

      mv {params.tmpbam} {output.bam}
      samtools index {output.bam}
      """

rule cutadapt:
  input:
    "{data}/data/fastqs/{samples}_L004_R1_001.fastq.gz"
  output:
    "{data}/data/cutadapt/{samples}_trimmed.fastq.gz"
  params:
    job_name = '{data}.cutadapt',
    memory = "select[mem>5] rusage[mem=5]"
  log:
    'log/{samples}_cutadapt.txt'
  shell:
    """
    module load python
    cutadapt \
      -a AGATCGGAAGAGCACACGTCTGAACTCCAGTCAC \
      -m 25 {input} \
      2> {log} \
      -o {output}
    module unload python
    """

rule star_idx:
  input:
    GENOME_FA 
  output:
    os.path.join(GENOME_DIR, "Genome")
  params:
    job_name = "star_idx",
    memory = "select[mem>110] rusage[mem=110]",
  log:
    os.path.join("{data}", "star", "logs", "star_idx.txt")
  message:
    "building star index "
  threads:
    24
  resources: all_threads=24
  shell:
    """
    STAR --runMode genomeGenerate \
      --genomeDir {GENOME_DIR}  \
      --genomeFastaFiles {GENOME} \
      --runThreadN {threads} \
      --sjdbGTFfile {TRANSCRIPTS} \
      --limitGenomeGenerateRAM 100000000000
    """
